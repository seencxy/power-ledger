// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package artifacts

import (
	"fmt"
	"math/big"
	"strings"

	"github.com/FISCO-BCOS/go-sdk/v3/abi"
	"github.com/FISCO-BCOS/go-sdk/v3/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/v3/types"
	"github.com/ethereum/go-ethereum/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
)

// AdvancedVirtualPowerPlantDAOABI is the input ABI used to generate the binding from.
const AdvancedVirtualPowerPlantDAOABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_encryptionLib\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"BalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OfferSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumAdvancedVirtualPowerPlantDAO.SettlementMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"ParticipantRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"TradeCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TradeExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumAdvancedVirtualPowerPlantDAO.SettlementMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"TradeSettled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_REPUTATION_SCORE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"getTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enumAdvancedVirtualPowerPlantDAO.SettlementMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputationScore\",\"type\":\"uint256\"},{\"internalType\":\"enumAdvancedVirtualPowerPlantDAO.Identifier\",\"name\":\"identifier\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumAdvancedVirtualPowerPlantDAO.SettlementMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enumAdvancedVirtualPowerPlantDAO.Identifier\",\"name\":\"identifier\",\"type\":\"uint8\"}],\"name\":\"registerParticipant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"settleTradePayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"encryptedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"submitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"encryptedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"submitOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// AdvancedVirtualPowerPlantDAOBin is the compiled bytecode used for deploying new contracts.
var AdvancedVirtualPowerPlantDAOBin = "0x60a06040523480156200001157600080fd5b5060405162003a3138038062003a31833981810160405281019062000037919062000231565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000ae5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a5919062000289565b60405180910390fd5b620000bf816200010360201b60201c565b50600180819055508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050620002a6565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001f982620001cc565b9050919050565b6200020b81620001ec565b81146200021757600080fd5b50565b6000815190506200022b8162000200565b92915050565b600080604083850312156200024b576200024a620001c7565b5b60006200025b858286016200021a565b92505060206200026e858286016200021a565b9150509250929050565b6200028381620001ec565b82525050565b6000602082019050620002a0600083018462000278565b92915050565b60805161374c620002e5600039600081816110fc01528181611c57015281816120d10152818161221a0152818161269401526127c6015261374c6000f3fe6080604052600436106100c25760003560e01c8063756af45f1161007f5780639546e679116100595780639546e67914610247578063c77943c014610270578063f2fde38b1461029b578063fe2a721e146102c4576100c2565b8063756af45f146101ca5780637fcbfe4e146101f35780638da5cb5b1461021c576100c2565b806309e69ede146100c757806309ec6cc71461010857806344320925146101315780636148a1321461015a5780636e553f6514610197578063715018a6146101b3575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190612c39565b6102ed565b6040516100ff959493929190612d4d565b60405180910390f35b34801561011457600080fd5b5061012f600480360381019061012a9190612dcc565b61035d565b005b34801561013d57600080fd5b5061015860048036038101906101539190612df9565b6104d4565b005b34801561016657600080fd5b50610181600480360381019061017c9190612dcc565b61075b565b60405161018e9190612e4c565b60405180910390f35b6101b160048036038101906101ac9190612e67565b61078a565b005b3480156101bf57600080fd5b506101c8610887565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190612c39565b61089b565b005b3480156101ff57600080fd5b5061021a60048036038101906102159190612ef1565b6109ea565b005b34801561022857600080fd5b50610231610c6e565b60405161023e9190612f44565b60405180910390f35b34801561025357600080fd5b5061026e60048036038101906102699190612df9565b610c97565b005b34801561027c57600080fd5b50610285610f1d565b6040516102929190612e4c565b60405180910390f35b3480156102a757600080fd5b506102c260048036038101906102bd9190612c39565b610f22565b005b3480156102d057600080fd5b506102eb60048036038101906102e69190612e67565b610fa9565b005b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154908060020154908060030160009054906101000a900460ff16905085565b61036561159a565b60006005828154811061037b5761037a612f5f565b5b906000526020600020906005020190508060040160009054906101000a900460ff16156103dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d490612feb565b60405180910390fd5b8060040160019054906101000a900460ff161561042f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042690613057565b60405180910390fd5b61043881611621565b60018160040160016101000a81548160ff0219169083151502179055506104a38160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb611924565b817fad521b51e4183d03fdc603c126ca5614f8730f21a104f15df29625da5d47967760405160405180910390a25050565b6050600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154101561055a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610551906130c3565b60405180910390fd5b6000600181111561056e5761056d612c75565b5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1660018111156105d0576105cf612c75565b5b14610610576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106079061312f565b60405180910390fd5b60006003805490509050600360405180608001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200160011515815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555050506107066001611a16565b8173ffffffffffffffffffffffffffffffffffffffff16817f9ce423f721817463c7cc902096f4dc780402a942570ea20e5577fa2db4942d4e8660405161074d9190612e4c565b60405180910390a350505050565b60006005828154811061077157610770612f5f565b5b9060005260206000209060050201600201549050919050565b610792611b01565b81600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546107e4919061317e565b925050819055508073ffffffffffffffffffffffffffffffffffffffff167f8ad64a0ac7700dd8425ab0499f107cb6e2cd1581d803c5b8c1c79dcb8190b1af600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546040516108739190612e4c565b60405180910390a2610883611b51565b5050565b61088f61159a565b6108996000611b5a565b565b6108a3611b01565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600101541161092d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092490613220565b60405180910390fd5b600081600101549050600082600101819055508273ffffffffffffffffffffffffffffffffffffffff167f8ad64a0ac7700dd8425ab0499f107cb6e2cd1581d803c5b8c1c79dcb8190b1af60006040516109879190613285565b60405180910390a28273ffffffffffffffffffffffffffffffffffffffff167fddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1826040516109d59190612e4c565b60405180910390a250506109e7611b51565b50565b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab2906132ec565b60405180910390fd5b6040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001846001811115610af557610af4612c75565b5b81526020016000815260200160648152602001826001811115610b1b57610b1a612c75565b5b815250600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690836001811115610bcf57610bce612c75565b5b0217905550604082015181600101556060820151816002015560808201518160030160006101000a81548160ff02191690836001811115610c1357610c12612c75565b5b02179055509050508173ffffffffffffffffffffffffffffffffffffffff167f806d89d78ee0f826f9fa2e75e6e53e4a91ee0f70688d2152fd4d107423f3da6384604051610c61919061330c565b60405180910390a2505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6050600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541015610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d14906130c3565b60405180910390fd5b600180811115610d3057610d2f612c75565b5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166001811115610d9257610d91612c75565b5b14610dd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc990613373565b60405180910390fd5b60006004805490509050600460405180608001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200160011515815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055505050610ec86000611a16565b8173ffffffffffffffffffffffffffffffffffffffff16817f177554f051f4aa1f0d0310334854b429baeecdb5a96bc329a26fd0cb7c8a7be386604051610f0f9190612e4c565b60405180910390a350505050565b605081565b610f2a61159a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f9d5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610f949190612f44565b60405180910390fd5b610fa681611b5a565b50565b610fb1611b01565b600060058381548110610fc757610fc6612f5f565b5b906000526020600020906005020190508060040160009054906101000a900460ff1615611029576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102090612feb565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806110b9575061108a610c6e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6110f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ef906133df565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637e0e155783600301548460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016111939291906133ff565b602060405180830381865afa1580156111b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d4919061343d565b82600201546111e3919061346a565b90506000600260008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600260008560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082826001015410156112fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f190613510565b60405180910390fd5b6000600181111561130e5761130d612c75565b5b8160000160149054906101000a900460ff16600181111561133257611331612c75565b5b14156113d25783600201548260010160008282546113509190613530565b925050819055508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f185600201546040516113c59190612e4c565b60405180910390a2611409565b828260010160008282546113e69190613530565b9250508190555082816001016000828254611401919061317e565b925050819055505b60018460040160006101000a81548160ff0219169083151502179055506114558460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001611924565b857fe5a2ae93d0e1ff40575daedb891e24b51ec149595c1a8c9287458fb7954b8a4e8360000160149054906101000a900460ff16604051611496919061330c565b60405180910390a28360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8ad64a0ac7700dd8425ab0499f107cb6e2cd1581d803c5b8c1c79dcb8190b1af826001015460405161150c9190612e4c565b60405180910390a28360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8ad64a0ac7700dd8425ab0499f107cb6e2cd1581d803c5b8c1c79dcb8190b1af83600101546040516115829190612e4c565b60405180910390a250505050611596611b51565b5050565b6115a2611c1e565b73ffffffffffffffffffffffffffffffffffffffff166115c0610c6e565b73ffffffffffffffffffffffffffffffffffffffff161461161f576115e3611c1e565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016116169190612f44565b60405180910390fd5b565b60005b6004805490508110156117a0578160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600482815481106116805761167f612f5f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156117055750600481815481106116e4576116e3612f5f565b5b906000526020600020906004020160030160009054906101000a900460ff16155b1561178d576001600482815481106117205761171f612f5f565b5b906000526020600020906004020160030160006101000a81548160ff02191690831515021790555081600201546004828154811061176157611760612f5f565b5b90600052602060002090600402016001016000828254611781919061317e565b925050819055506117a0565b808061179890613564565b915050611624565b5060005b600380549050811015611920578160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660038281548110611800576117ff612f5f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561188557506003818154811061186457611863612f5f565b5b906000526020600020906004020160030160009054906101000a900460ff16155b1561190d576001600382815481106118a05761189f612f5f565b5b906000526020600020906004020160030160006101000a81548160ff0219169083151502179055508160020154600382815481106118e1576118e0612f5f565b5b90600052602060002090600402016001016000828254611901919061317e565b92505081905550611920565b808061191890613564565b9150506117a4565b5050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000821380156119a55750817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61199e9190613530565b8160020154105b156119ca57818160020160008282546119be919061317e565b92505081905550611a11565b6000821280156119e65750816119df906135b7565b8160020154115b15611a1057816119f5906135b7565b816002016000828254611a089190613530565b925050819055505b5b505050565b8015611a8f57611a24611c26565b60005b600380549050811015611a895760038181548110611a4857611a47612f5f565b5b906000526020600020906004020160030160009054906101000a900460ff1615611a7657611a7581612040565b5b8080611a8190613564565b915050611a27565b50611afe565b611a976121e9565b60005b600480549050811015611afc5760048181548110611abb57611aba612f5f565b5b906000526020600020906004020160030160009054906101000a900460ff1615611ae957611ae881612603565b5b8080611af490613564565b915050611a9a565b505b50565b60026001541415611b47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3e9061364c565b60405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60005b60048054905081101561203d576000600182611c45919061317e565b90505b600480549050811015612029577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663457e403a60048481548110611ca557611ca4612f5f565b5b90600052602060002090600402016002015460048581548110611ccb57611cca612f5f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660048581548110611d1157611d10612f5f565b5b90600052602060002090600402016002015460048681548110611d3757611d36612f5f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401611d88949392919061366c565b602060405180830381865afa158015611da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc991906136e9565b1561201657600060048381548110611de457611de3612f5f565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff161515151581525050905060048281548110611e9857611e97612f5f565b5b906000526020600020906004020160048481548110611eba57611eb9612f5f565b5b90600052602060002090600402016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018201548160010155600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff0219169083151502179055509050508060048381548110611f8857611f87612f5f565b5b906000526020600020906004020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050505b808061202190613564565b915050611c48565b50808061203590613564565b915050611c29565b50565b60006003828154811061205657612055612f5f565b5b9060005260206000209060040201905060005b6004805490508110801561208b57508160030160009054906101000a900460ff165b156121e4576000600482815481106120a6576120a5612f5f565b5b906000526020600020906004020190508060030160009054906101000a900460ff1680156121c057507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166362f9500282600201548360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600201548760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b815260040161217e949392919061366c565b602060405180830381865afa15801561219b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bf91906136e9565b5b156121d0576121cf83826127ac565b5b5080806121dc90613564565b915050612069565b505050565b60005b600380549050811015612600576000600182612208919061317e565b90505b6003805490508110156125ec577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fef511076003848154811061226857612267612f5f565b5b9060005260206000209060040201600201546003858154811061228e5761228d612f5f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600385815481106122d4576122d3612f5f565b5b906000526020600020906004020160020154600386815481106122fa576122f9612f5f565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b815260040161234b949392919061366c565b602060405180830381865afa158015612368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238c91906136e9565b156125d9576000600383815481106123a7576123a6612f5f565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506003828154811061245b5761245a612f5f565b5b90600052602060002090600402016003848154811061247d5761247c612f5f565b5b90600052602060002090600402016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018201548160010155600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff021916908315150217905550905050806003838154811061254b5761254a612f5f565b5b906000526020600020906004020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050505b80806125e490613564565b91505061220b565b5080806125f890613564565b9150506121ec565b50565b60006004828154811061261957612618612f5f565b5b9060005260206000209060040201905060005b6003805490508110801561264e57508160030160009054906101000a900460ff165b156127a75760006003828154811061266957612668612f5f565b5b906000526020600020906004020190508060030160009054906101000a900460ff16801561278357507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663632544f182600201548360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600201548760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401612741949392919061366c565b602060405180830381865afa15801561275e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278291906136e9565b5b156127935761279281846127ac565b5b50808061279f90613564565b91505061262c565b505050565b60006127c083600101548360010154612bbd565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637373861b84600201548560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600201548860000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401612873949392919061366c565b602060405180830381865afa158015612890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b4919061343d565b905060056040518060c001604052808660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200160001515815260200160001515815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548160ff02191690831515021790555050508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166001600580549050612af49190613530565b7fd78d794f3970a6662278469523ed77ea2ba4e5de1d7e203e1929e92522feef1e85604051612b239190612e4c565b60405180910390a481846001016000828254612b3f9190613530565b9250508190555081836001016000828254612b5a9190613530565b92505081905550600084600101541415612b8c5760008460030160006101000a81548160ff0219169083151502179055505b600083600101541415612bb75760008360030160006101000a81548160ff0219169083151502179055505b50505050565b6000818310612bcc5781612bce565b825b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c0682612bdb565b9050919050565b612c1681612bfb565b8114612c2157600080fd5b50565b600081359050612c3381612c0d565b92915050565b600060208284031215612c4f57612c4e612bd6565b5b6000612c5d84828501612c24565b91505092915050565b612c6f81612bfb565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612cb557612cb4612c75565b5b50565b6000819050612cc682612ca4565b919050565b6000612cd682612cb8565b9050919050565b612ce681612ccb565b82525050565b6000819050919050565b612cff81612cec565b82525050565b60028110612d1657612d15612c75565b5b50565b6000819050612d2782612d05565b919050565b6000612d3782612d19565b9050919050565b612d4781612d2c565b82525050565b600060a082019050612d626000830188612c66565b612d6f6020830187612cdd565b612d7c6040830186612cf6565b612d896060830185612cf6565b612d966080830184612d3e565b9695505050505050565b612da981612cec565b8114612db457600080fd5b50565b600081359050612dc681612da0565b92915050565b600060208284031215612de257612de1612bd6565b5b6000612df084828501612db7565b91505092915050565b600080600060608486031215612e1257612e11612bd6565b5b6000612e2086828701612db7565b9350506020612e3186828701612db7565b9250506040612e4286828701612c24565b9150509250925092565b6000602082019050612e616000830184612cf6565b92915050565b60008060408385031215612e7e57612e7d612bd6565b5b6000612e8c85828601612db7565b9250506020612e9d85828601612c24565b9150509250929050565b60028110612eb457600080fd5b50565b600081359050612ec681612ea7565b92915050565b60028110612ed957600080fd5b50565b600081359050612eeb81612ecc565b92915050565b600080600060608486031215612f0a57612f09612bd6565b5b6000612f1886828701612eb7565b9350506020612f2986828701612c24565b9250506040612f3a86828701612edc565b9150509250925092565b6000602082019050612f596000830184612c66565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f547261646520616c726561647920736574746c65640000000000000000000000600082015250565b6000612fd5601583612f8e565b9150612fe082612f9f565b602082019050919050565b6000602082019050818103600083015261300481612fc8565b9050919050565b7f547261646520616c72656164792063616e63656c656400000000000000000000600082015250565b6000613041601683612f8e565b915061304c8261300b565b602082019050919050565b6000602082019050818103600083015261307081613034565b9050919050565b7f496e73756666696369656e742072657075746174696f6e2073636f7265000000600082015250565b60006130ad601d83612f8e565b91506130b882613077565b602082019050919050565b600060208201905081810360008301526130dc816130a0565b9050919050565b7f6e6f742073656c6c657200000000000000000000000000000000000000000000600082015250565b6000613119600a83612f8e565b9150613124826130e3565b602082019050919050565b600060208201905081810360008301526131488161310c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061318982612cec565b915061319483612cec565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131c9576131c861314f565b5b828201905092915050565b7f4e6f2062616c616e636520746f20776974686472617700000000000000000000600082015250565b600061320a601683612f8e565b9150613215826131d4565b602082019050919050565b60006020820190508181036000830152613239816131fd565b9050919050565b6000819050919050565b6000819050919050565b600061326f61326a61326584613240565b61324a565b612cec565b9050919050565b61327f81613254565b82525050565b600060208201905061329a6000830184613276565b92915050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b60006132d6601283612f8e565b91506132e1826132a0565b602082019050919050565b60006020820190508181036000830152613305816132c9565b9050919050565b60006020820190506133216000830184612cdd565b92915050565b7f6e6f742062757965720000000000000000000000000000000000000000000000600082015250565b600061335d600983612f8e565b915061336882613327565b602082019050919050565b6000602082019050818103600083015261338c81613350565b9050919050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b60006133c9600c83612f8e565b91506133d482613393565b602082019050919050565b600060208201905081810360008301526133f8816133bc565b9050919050565b60006040820190506134146000830185612cf6565b6134216020830184612cf6565b9392505050565b60008151905061343781612da0565b92915050565b60006020828403121561345357613452612bd6565b5b600061346184828501613428565b91505092915050565b600061347582612cec565b915061348083612cec565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156134b9576134b861314f565b5b828202905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006134fa601483612f8e565b9150613505826134c4565b602082019050919050565b60006020820190508181036000830152613529816134ed565b9050919050565b600061353b82612cec565b915061354683612cec565b9250828210156135595761355861314f565b5b828203905092915050565b600061356f82612cec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135a2576135a161314f565b5b600182019050919050565b6000819050919050565b60006135c2826135ad565b91507f80000000000000000000000000000000000000000000000000000000000000008214156135f5576135f461314f565b5b816000039050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613636601f83612f8e565b915061364182613600565b602082019050919050565b6000602082019050818103600083015261366581613629565b9050919050565b60006080820190506136816000830187612cf6565b61368e6020830186612c66565b61369b6040830185612cf6565b6136a86060830184612c66565b95945050505050565b60008115159050919050565b6136c6816136b1565b81146136d157600080fd5b50565b6000815190506136e3816136bd565b92915050565b6000602082840312156136ff576136fe612bd6565b5b600061370d848285016136d4565b9150509291505056fea264697066735822122027585338047cb43114242a872f715da0f7b5ec9629dd46dea7095b8eac478cb064736f6c634300080b0033"
var AdvancedVirtualPowerPlantDAOSMBin = "0x"

// DeployAdvancedVirtualPowerPlantDAO deploys a new contract, binding an instance of AdvancedVirtualPowerPlantDAO to it.
func DeployAdvancedVirtualPowerPlantDAO(auth *bind.TransactOpts, backend bind.ContractBackend, _encryptionLib common.Address, initialOwner common.Address) (common.Address, *types.Receipt, *AdvancedVirtualPowerPlantDAO, error) {
	parsed, err := abi.JSON(strings.NewReader(AdvancedVirtualPowerPlantDAOABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	var bytecode []byte
	if backend.SMCrypto() {
		bytecode = common.FromHex(AdvancedVirtualPowerPlantDAOSMBin)
	} else {
		bytecode = common.FromHex(AdvancedVirtualPowerPlantDAOBin)
	}
	if len(bytecode) == 0 {
		return common.Address{}, nil, nil, fmt.Errorf("cannot deploy empty bytecode")
	}
	address, receipt, contract, err := bind.DeployContract(auth, parsed, bytecode, AdvancedVirtualPowerPlantDAOABI, backend, _encryptionLib, initialOwner)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, receipt, &AdvancedVirtualPowerPlantDAO{AdvancedVirtualPowerPlantDAOCaller: AdvancedVirtualPowerPlantDAOCaller{contract: contract}, AdvancedVirtualPowerPlantDAOTransactor: AdvancedVirtualPowerPlantDAOTransactor{contract: contract}, AdvancedVirtualPowerPlantDAOFilterer: AdvancedVirtualPowerPlantDAOFilterer{contract: contract}}, nil
}

func AsyncDeployAdvancedVirtualPowerPlantDAO(auth *bind.TransactOpts, handler func(*types.Receipt, error), backend bind.ContractBackend, _encryptionLib common.Address, initialOwner common.Address) (*types.Transaction, error) {
	parsed, err := abi.JSON(strings.NewReader(AdvancedVirtualPowerPlantDAOABI))
	if err != nil {
		return nil, err
	}

	var bytecode []byte
	if backend.SMCrypto() {
		bytecode = common.FromHex(AdvancedVirtualPowerPlantDAOSMBin)
	} else {
		bytecode = common.FromHex(AdvancedVirtualPowerPlantDAOBin)
	}
	if len(bytecode) == 0 {
		return nil, fmt.Errorf("cannot deploy empty bytecode")
	}
	tx, err := bind.AsyncDeployContract(auth, handler, parsed, bytecode, AdvancedVirtualPowerPlantDAOABI, backend, _encryptionLib, initialOwner)
	if err != nil {
		return nil, err
	}
	return tx, nil
}

// AdvancedVirtualPowerPlantDAO is an auto generated Go binding around a Solidity contract.
type AdvancedVirtualPowerPlantDAO struct {
	AdvancedVirtualPowerPlantDAOCaller     // Read-only binding to the contract
	AdvancedVirtualPowerPlantDAOTransactor // Write-only binding to the contract
	AdvancedVirtualPowerPlantDAOFilterer   // Log filterer for contract events
}

// AdvancedVirtualPowerPlantDAOCaller is an auto generated read-only Go binding around a Solidity contract.
type AdvancedVirtualPowerPlantDAOCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdvancedVirtualPowerPlantDAOTransactor is an auto generated write-only Go binding around a Solidity contract.
type AdvancedVirtualPowerPlantDAOTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdvancedVirtualPowerPlantDAOFilterer is an auto generated log filtering Go binding around a Solidity contract events.
type AdvancedVirtualPowerPlantDAOFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdvancedVirtualPowerPlantDAOSession is an auto generated Go binding around a Solidity contract,
// with pre-set call and transact options.
type AdvancedVirtualPowerPlantDAOSession struct {
	Contract     *AdvancedVirtualPowerPlantDAO // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// AdvancedVirtualPowerPlantDAOCallerSession is an auto generated read-only Go binding around a Solidity contract,
// with pre-set call options.
type AdvancedVirtualPowerPlantDAOCallerSession struct {
	Contract *AdvancedVirtualPowerPlantDAOCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// AdvancedVirtualPowerPlantDAOTransactorSession is an auto generated write-only Go binding around a Solidity contract,
// with pre-set transact options.
type AdvancedVirtualPowerPlantDAOTransactorSession struct {
	Contract     *AdvancedVirtualPowerPlantDAOTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// AdvancedVirtualPowerPlantDAORaw is an auto generated low-level Go binding around a Solidity contract.
type AdvancedVirtualPowerPlantDAORaw struct {
	Contract *AdvancedVirtualPowerPlantDAO // Generic contract binding to access the raw methods on
}

// AdvancedVirtualPowerPlantDAOCallerRaw is an auto generated low-level read-only Go binding around a Solidity contract.
type AdvancedVirtualPowerPlantDAOCallerRaw struct {
	Contract *AdvancedVirtualPowerPlantDAOCaller // Generic read-only contract binding to access the raw methods on
}

// AdvancedVirtualPowerPlantDAOTransactorRaw is an auto generated low-level write-only Go binding around a Solidity contract.
type AdvancedVirtualPowerPlantDAOTransactorRaw struct {
	Contract *AdvancedVirtualPowerPlantDAOTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAdvancedVirtualPowerPlantDAO creates a new instance of AdvancedVirtualPowerPlantDAO, bound to a specific deployed contract.
func NewAdvancedVirtualPowerPlantDAO(address common.Address, backend bind.ContractBackend) (*AdvancedVirtualPowerPlantDAO, error) {
	contract, err := bindAdvancedVirtualPowerPlantDAO(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AdvancedVirtualPowerPlantDAO{AdvancedVirtualPowerPlantDAOCaller: AdvancedVirtualPowerPlantDAOCaller{contract: contract}, AdvancedVirtualPowerPlantDAOTransactor: AdvancedVirtualPowerPlantDAOTransactor{contract: contract}, AdvancedVirtualPowerPlantDAOFilterer: AdvancedVirtualPowerPlantDAOFilterer{contract: contract}}, nil
}

// NewAdvancedVirtualPowerPlantDAOCaller creates a new read-only instance of AdvancedVirtualPowerPlantDAO, bound to a specific deployed contract.
func NewAdvancedVirtualPowerPlantDAOCaller(address common.Address, caller bind.ContractCaller) (*AdvancedVirtualPowerPlantDAOCaller, error) {
	contract, err := bindAdvancedVirtualPowerPlantDAO(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AdvancedVirtualPowerPlantDAOCaller{contract: contract}, nil
}

// NewAdvancedVirtualPowerPlantDAOTransactor creates a new write-only instance of AdvancedVirtualPowerPlantDAO, bound to a specific deployed contract.
func NewAdvancedVirtualPowerPlantDAOTransactor(address common.Address, transactor bind.ContractTransactor) (*AdvancedVirtualPowerPlantDAOTransactor, error) {
	contract, err := bindAdvancedVirtualPowerPlantDAO(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AdvancedVirtualPowerPlantDAOTransactor{contract: contract}, nil
}

// NewAdvancedVirtualPowerPlantDAOFilterer creates a new log filterer instance of AdvancedVirtualPowerPlantDAO, bound to a specific deployed contract.
func NewAdvancedVirtualPowerPlantDAOFilterer(address common.Address, filterer bind.ContractFilterer) (*AdvancedVirtualPowerPlantDAOFilterer, error) {
	contract, err := bindAdvancedVirtualPowerPlantDAO(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AdvancedVirtualPowerPlantDAOFilterer{contract: contract}, nil
}

// bindAdvancedVirtualPowerPlantDAO binds a generic wrapper to an already deployed contract.
func bindAdvancedVirtualPowerPlantDAO(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AdvancedVirtualPowerPlantDAOABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAORaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AdvancedVirtualPowerPlantDAO.Contract.AdvancedVirtualPowerPlantDAOCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAORaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AdvancedVirtualPowerPlantDAOTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAORaw) TransactWithResult(opts *bind.TransactOpts, result interface{}, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AdvancedVirtualPowerPlantDAOTransactor.contract.TransactWithResult(opts, result, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AdvancedVirtualPowerPlantDAO.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorRaw) TransactWithResult(opts *bind.TransactOpts, result interface{}, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.contract.TransactWithResult(opts, result, method, params...)
}

// MINREPUTATIONSCORE is a free data retrieval call binding the contract method 0xc77943c0.
//
// Solidity: function MIN_REPUTATION_SCORE() constant returns(uint256)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOCaller) MINREPUTATIONSCORE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AdvancedVirtualPowerPlantDAO.contract.Call(opts, out, "MIN_REPUTATION_SCORE")
	return *ret0, err
}

// MINREPUTATIONSCORE is a free data retrieval call binding the contract method 0xc77943c0.
//
// Solidity: function MIN_REPUTATION_SCORE() constant returns(uint256)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) MINREPUTATIONSCORE() (*big.Int, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.MINREPUTATIONSCORE(&_AdvancedVirtualPowerPlantDAO.CallOpts)
}

// MINREPUTATIONSCORE is a free data retrieval call binding the contract method 0xc77943c0.
//
// Solidity: function MIN_REPUTATION_SCORE() constant returns(uint256)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOCallerSession) MINREPUTATIONSCORE() (*big.Int, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.MINREPUTATIONSCORE(&_AdvancedVirtualPowerPlantDAO.CallOpts)
}

// GetTradeAmount is a free data retrieval call binding the contract method 0x6148a132.
//
// Solidity: function getTradeAmount(uint256 tradeId) constant returns(uint256)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOCaller) GetTradeAmount(opts *bind.CallOpts, tradeId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AdvancedVirtualPowerPlantDAO.contract.Call(opts, out, "getTradeAmount", tradeId)
	return *ret0, err
}

// GetTradeAmount is a free data retrieval call binding the contract method 0x6148a132.
//
// Solidity: function getTradeAmount(uint256 tradeId) constant returns(uint256)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) GetTradeAmount(tradeId *big.Int) (*big.Int, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.GetTradeAmount(&_AdvancedVirtualPowerPlantDAO.CallOpts, tradeId)
}

// GetTradeAmount is a free data retrieval call binding the contract method 0x6148a132.
//
// Solidity: function getTradeAmount(uint256 tradeId) constant returns(uint256)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOCallerSession) GetTradeAmount(tradeId *big.Int) (*big.Int, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.GetTradeAmount(&_AdvancedVirtualPowerPlantDAO.CallOpts, tradeId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AdvancedVirtualPowerPlantDAO.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) Owner() (common.Address, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.Owner(&_AdvancedVirtualPowerPlantDAO.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOCallerSession) Owner() (common.Address, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.Owner(&_AdvancedVirtualPowerPlantDAO.CallOpts)
}

// Participants is a free data retrieval call binding the contract method 0x09e69ede.
//
// Solidity: function participants(address ) constant returns(address addr, uint8 mode, uint256 balance, uint256 reputationScore, uint8 identifier)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOCaller) Participants(opts *bind.CallOpts, arg0 common.Address) (struct {
	Addr            common.Address
	Mode            uint8
	Balance         *big.Int
	ReputationScore *big.Int
	Identifier      uint8
}, error) {
	ret := new(struct {
		Addr            common.Address
		Mode            uint8
		Balance         *big.Int
		ReputationScore *big.Int
		Identifier      uint8
	})
	out := ret
	err := _AdvancedVirtualPowerPlantDAO.contract.Call(opts, out, "participants", arg0)
	return *ret, err
}

// Participants is a free data retrieval call binding the contract method 0x09e69ede.
//
// Solidity: function participants(address ) constant returns(address addr, uint8 mode, uint256 balance, uint256 reputationScore, uint8 identifier)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) Participants(arg0 common.Address) (struct {
	Addr            common.Address
	Mode            uint8
	Balance         *big.Int
	ReputationScore *big.Int
	Identifier      uint8
}, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.Participants(&_AdvancedVirtualPowerPlantDAO.CallOpts, arg0)
}

// Participants is a free data retrieval call binding the contract method 0x09e69ede.
//
// Solidity: function participants(address ) constant returns(address addr, uint8 mode, uint256 balance, uint256 reputationScore, uint8 identifier)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOCallerSession) Participants(arg0 common.Address) (struct {
	Addr            common.Address
	Mode            uint8
	Balance         *big.Int
	ReputationScore *big.Int
	Identifier      uint8
}, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.Participants(&_AdvancedVirtualPowerPlantDAO.CallOpts, arg0)
}

// CancelTrade is a paid mutator transaction binding the contract method 0x09ec6cc7.
//
// Solidity: function cancelTrade(uint256 tradeId) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) CancelTrade(opts *bind.TransactOpts, tradeId *big.Int) (*types.Transaction, *types.Receipt, error) {
	var ()
	out := &[]interface{}{}
	transaction, receipt, err := _AdvancedVirtualPowerPlantDAO.contract.TransactWithResult(opts, out, "cancelTrade", tradeId)
	return transaction, receipt, err
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) AsyncCancelTrade(handler func(*types.Receipt, error), opts *bind.TransactOpts, tradeId *big.Int) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.AsyncTransact(opts, handler, "cancelTrade", tradeId)
}

// CancelTrade is a paid mutator transaction binding the contract method 0x09ec6cc7.
//
// Solidity: function cancelTrade(uint256 tradeId) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) CancelTrade(tradeId *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.CancelTrade(&_AdvancedVirtualPowerPlantDAO.TransactOpts, tradeId)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) AsyncCancelTrade(handler func(*types.Receipt, error), tradeId *big.Int) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncCancelTrade(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, tradeId)
}

// CancelTrade is a paid mutator transaction binding the contract method 0x09ec6cc7.
//
// Solidity: function cancelTrade(uint256 tradeId) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) CancelTrade(tradeId *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.CancelTrade(&_AdvancedVirtualPowerPlantDAO.TransactOpts, tradeId)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) AsyncCancelTrade(handler func(*types.Receipt, error), tradeId *big.Int) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncCancelTrade(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, tradeId)
}

// Deposit is a paid mutator transaction binding the contract method 0x6e553f65.
//
// Solidity: function deposit(uint256 amount, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) Deposit(opts *bind.TransactOpts, amount *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	var ()
	out := &[]interface{}{}
	transaction, receipt, err := _AdvancedVirtualPowerPlantDAO.contract.TransactWithResult(opts, out, "deposit", amount, addr)
	return transaction, receipt, err
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) AsyncDeposit(handler func(*types.Receipt, error), opts *bind.TransactOpts, amount *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.AsyncTransact(opts, handler, "deposit", amount, addr)
}

// Deposit is a paid mutator transaction binding the contract method 0x6e553f65.
//
// Solidity: function deposit(uint256 amount, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) Deposit(amount *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.Deposit(&_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, addr)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) AsyncDeposit(handler func(*types.Receipt, error), amount *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncDeposit(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, addr)
}

// Deposit is a paid mutator transaction binding the contract method 0x6e553f65.
//
// Solidity: function deposit(uint256 amount, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) Deposit(amount *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.Deposit(&_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, addr)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) AsyncDeposit(handler func(*types.Receipt, error), amount *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncDeposit(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, addr)
}

// RegisterParticipant is a paid mutator transaction binding the contract method 0x7fcbfe4e.
//
// Solidity: function registerParticipant(uint8 mode, address addr, uint8 identifier) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) RegisterParticipant(opts *bind.TransactOpts, mode uint8, addr common.Address, identifier uint8) (*types.Transaction, *types.Receipt, error) {
	var ()
	out := &[]interface{}{}
	transaction, receipt, err := _AdvancedVirtualPowerPlantDAO.contract.TransactWithResult(opts, out, "registerParticipant", mode, addr, identifier)
	return transaction, receipt, err
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) AsyncRegisterParticipant(handler func(*types.Receipt, error), opts *bind.TransactOpts, mode uint8, addr common.Address, identifier uint8) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.AsyncTransact(opts, handler, "registerParticipant", mode, addr, identifier)
}

// RegisterParticipant is a paid mutator transaction binding the contract method 0x7fcbfe4e.
//
// Solidity: function registerParticipant(uint8 mode, address addr, uint8 identifier) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) RegisterParticipant(mode uint8, addr common.Address, identifier uint8) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.RegisterParticipant(&_AdvancedVirtualPowerPlantDAO.TransactOpts, mode, addr, identifier)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) AsyncRegisterParticipant(handler func(*types.Receipt, error), mode uint8, addr common.Address, identifier uint8) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncRegisterParticipant(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, mode, addr, identifier)
}

// RegisterParticipant is a paid mutator transaction binding the contract method 0x7fcbfe4e.
//
// Solidity: function registerParticipant(uint8 mode, address addr, uint8 identifier) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) RegisterParticipant(mode uint8, addr common.Address, identifier uint8) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.RegisterParticipant(&_AdvancedVirtualPowerPlantDAO.TransactOpts, mode, addr, identifier)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) AsyncRegisterParticipant(handler func(*types.Receipt, error), mode uint8, addr common.Address, identifier uint8) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncRegisterParticipant(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, mode, addr, identifier)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	var ()
	out := &[]interface{}{}
	transaction, receipt, err := _AdvancedVirtualPowerPlantDAO.contract.TransactWithResult(opts, out, "renounceOwnership")
	return transaction, receipt, err
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) AsyncRenounceOwnership(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.AsyncTransact(opts, handler, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) RenounceOwnership() (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.RenounceOwnership(&_AdvancedVirtualPowerPlantDAO.TransactOpts)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) AsyncRenounceOwnership(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncRenounceOwnership(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) RenounceOwnership() (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.RenounceOwnership(&_AdvancedVirtualPowerPlantDAO.TransactOpts)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) AsyncRenounceOwnership(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncRenounceOwnership(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts)
}

// SettleTradePayments is a paid mutator transaction binding the contract method 0xfe2a721e.
//
// Solidity: function settleTradePayments(uint256 tradeId, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) SettleTradePayments(opts *bind.TransactOpts, tradeId *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	var ()
	out := &[]interface{}{}
	transaction, receipt, err := _AdvancedVirtualPowerPlantDAO.contract.TransactWithResult(opts, out, "settleTradePayments", tradeId, addr)
	return transaction, receipt, err
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) AsyncSettleTradePayments(handler func(*types.Receipt, error), opts *bind.TransactOpts, tradeId *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.AsyncTransact(opts, handler, "settleTradePayments", tradeId, addr)
}

// SettleTradePayments is a paid mutator transaction binding the contract method 0xfe2a721e.
//
// Solidity: function settleTradePayments(uint256 tradeId, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) SettleTradePayments(tradeId *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.SettleTradePayments(&_AdvancedVirtualPowerPlantDAO.TransactOpts, tradeId, addr)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) AsyncSettleTradePayments(handler func(*types.Receipt, error), tradeId *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncSettleTradePayments(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, tradeId, addr)
}

// SettleTradePayments is a paid mutator transaction binding the contract method 0xfe2a721e.
//
// Solidity: function settleTradePayments(uint256 tradeId, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) SettleTradePayments(tradeId *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.SettleTradePayments(&_AdvancedVirtualPowerPlantDAO.TransactOpts, tradeId, addr)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) AsyncSettleTradePayments(handler func(*types.Receipt, error), tradeId *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncSettleTradePayments(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, tradeId, addr)
}

// SubmitBid is a paid mutator transaction binding the contract method 0x9546e679.
//
// Solidity: function submitBid(uint256 amount, uint256 encryptedPrice, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) SubmitBid(opts *bind.TransactOpts, amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	var ()
	out := &[]interface{}{}
	transaction, receipt, err := _AdvancedVirtualPowerPlantDAO.contract.TransactWithResult(opts, out, "submitBid", amount, encryptedPrice, addr)
	return transaction, receipt, err
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) AsyncSubmitBid(handler func(*types.Receipt, error), opts *bind.TransactOpts, amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.AsyncTransact(opts, handler, "submitBid", amount, encryptedPrice, addr)
}

// SubmitBid is a paid mutator transaction binding the contract method 0x9546e679.
//
// Solidity: function submitBid(uint256 amount, uint256 encryptedPrice, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) SubmitBid(amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.SubmitBid(&_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, encryptedPrice, addr)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) AsyncSubmitBid(handler func(*types.Receipt, error), amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncSubmitBid(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, encryptedPrice, addr)
}

// SubmitBid is a paid mutator transaction binding the contract method 0x9546e679.
//
// Solidity: function submitBid(uint256 amount, uint256 encryptedPrice, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) SubmitBid(amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.SubmitBid(&_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, encryptedPrice, addr)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) AsyncSubmitBid(handler func(*types.Receipt, error), amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncSubmitBid(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, encryptedPrice, addr)
}

// SubmitOffer is a paid mutator transaction binding the contract method 0x44320925.
//
// Solidity: function submitOffer(uint256 amount, uint256 encryptedPrice, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) SubmitOffer(opts *bind.TransactOpts, amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	var ()
	out := &[]interface{}{}
	transaction, receipt, err := _AdvancedVirtualPowerPlantDAO.contract.TransactWithResult(opts, out, "submitOffer", amount, encryptedPrice, addr)
	return transaction, receipt, err
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) AsyncSubmitOffer(handler func(*types.Receipt, error), opts *bind.TransactOpts, amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.AsyncTransact(opts, handler, "submitOffer", amount, encryptedPrice, addr)
}

// SubmitOffer is a paid mutator transaction binding the contract method 0x44320925.
//
// Solidity: function submitOffer(uint256 amount, uint256 encryptedPrice, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) SubmitOffer(amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.SubmitOffer(&_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, encryptedPrice, addr)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) AsyncSubmitOffer(handler func(*types.Receipt, error), amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncSubmitOffer(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, encryptedPrice, addr)
}

// SubmitOffer is a paid mutator transaction binding the contract method 0x44320925.
//
// Solidity: function submitOffer(uint256 amount, uint256 encryptedPrice, address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) SubmitOffer(amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.SubmitOffer(&_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, encryptedPrice, addr)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) AsyncSubmitOffer(handler func(*types.Receipt, error), amount *big.Int, encryptedPrice *big.Int, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncSubmitOffer(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, amount, encryptedPrice, addr)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, *types.Receipt, error) {
	var ()
	out := &[]interface{}{}
	transaction, receipt, err := _AdvancedVirtualPowerPlantDAO.contract.TransactWithResult(opts, out, "transferOwnership", newOwner)
	return transaction, receipt, err
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) AsyncTransferOwnership(handler func(*types.Receipt, error), opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.AsyncTransact(opts, handler, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) TransferOwnership(newOwner common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.TransferOwnership(&_AdvancedVirtualPowerPlantDAO.TransactOpts, newOwner)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) AsyncTransferOwnership(handler func(*types.Receipt, error), newOwner common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncTransferOwnership(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.TransferOwnership(&_AdvancedVirtualPowerPlantDAO.TransactOpts, newOwner)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) AsyncTransferOwnership(handler func(*types.Receipt, error), newOwner common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncTransferOwnership(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, newOwner)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x756af45f.
//
// Solidity: function withdrawBalance(address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) WithdrawBalance(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	var ()
	out := &[]interface{}{}
	transaction, receipt, err := _AdvancedVirtualPowerPlantDAO.contract.TransactWithResult(opts, out, "withdrawBalance", addr)
	return transaction, receipt, err
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactor) AsyncWithdrawBalance(handler func(*types.Receipt, error), opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.AsyncTransact(opts, handler, "withdrawBalance", addr)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x756af45f.
//
// Solidity: function withdrawBalance(address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WithdrawBalance(addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WithdrawBalance(&_AdvancedVirtualPowerPlantDAO.TransactOpts, addr)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) AsyncWithdrawBalance(handler func(*types.Receipt, error), addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncWithdrawBalance(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, addr)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x756af45f.
//
// Solidity: function withdrawBalance(address addr) returns()
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) WithdrawBalance(addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WithdrawBalance(&_AdvancedVirtualPowerPlantDAO.TransactOpts, addr)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOTransactorSession) AsyncWithdrawBalance(handler func(*types.Receipt, error), addr common.Address) (*types.Transaction, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.AsyncWithdrawBalance(handler, &_AdvancedVirtualPowerPlantDAO.TransactOpts, addr)
}

// AdvancedVirtualPowerPlantDAOBalanceUpdated represents a BalanceUpdated event raised by the AdvancedVirtualPowerPlantDAO contract.
type AdvancedVirtualPowerPlantDAOBalanceUpdated struct {
	Participant common.Address
	NewBalance  *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// WatchBalanceUpdated is a free log subscription operation binding the contract event 0x8ad64a0ac7700dd8425ab0499f107cb6e2cd1581d803c5b8c1c79dcb8190b1af.
//
// Solidity: event BalanceUpdated(address indexed participant, uint256 newBalance)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchBalanceUpdated(fromBlock *int64, handler func(int, []types.Log), participant common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "BalanceUpdated", participant)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchAllBalanceUpdated(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "BalanceUpdated")
}

// ParseBalanceUpdated is a log parse operation binding the contract event 0x8ad64a0ac7700dd8425ab0499f107cb6e2cd1581d803c5b8c1c79dcb8190b1af.
//
// Solidity: event BalanceUpdated(address indexed participant, uint256 newBalance)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) ParseBalanceUpdated(log types.Log) (*AdvancedVirtualPowerPlantDAOBalanceUpdated, error) {
	event := new(AdvancedVirtualPowerPlantDAOBalanceUpdated)
	if err := _AdvancedVirtualPowerPlantDAO.contract.UnpackLog(event, "BalanceUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchBalanceUpdated is a free log subscription operation binding the contract event 0x8ad64a0ac7700dd8425ab0499f107cb6e2cd1581d803c5b8c1c79dcb8190b1af.
//
// Solidity: event BalanceUpdated(address indexed participant, uint256 newBalance)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchBalanceUpdated(fromBlock *int64, handler func(int, []types.Log), participant common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchBalanceUpdated(fromBlock, handler, participant)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchAllBalanceUpdated(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchAllBalanceUpdated(fromBlock, handler)
}

// ParseBalanceUpdated is a log parse operation binding the contract event 0x8ad64a0ac7700dd8425ab0499f107cb6e2cd1581d803c5b8c1c79dcb8190b1af.
//
// Solidity: event BalanceUpdated(address indexed participant, uint256 newBalance)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) ParseBalanceUpdated(log types.Log) (*AdvancedVirtualPowerPlantDAOBalanceUpdated, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.ParseBalanceUpdated(log)
}

// AdvancedVirtualPowerPlantDAOBalanceWithdrawn represents a BalanceWithdrawn event raised by the AdvancedVirtualPowerPlantDAO contract.
type AdvancedVirtualPowerPlantDAOBalanceWithdrawn struct {
	Participant     common.Address
	WithdrawnAmount *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// WatchBalanceWithdrawn is a free log subscription operation binding the contract event 0xddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1.
//
// Solidity: event BalanceWithdrawn(address indexed participant, uint256 withdrawnAmount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchBalanceWithdrawn(fromBlock *int64, handler func(int, []types.Log), participant common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "BalanceWithdrawn", participant)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchAllBalanceWithdrawn(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "BalanceWithdrawn")
}

// ParseBalanceWithdrawn is a log parse operation binding the contract event 0xddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1.
//
// Solidity: event BalanceWithdrawn(address indexed participant, uint256 withdrawnAmount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) ParseBalanceWithdrawn(log types.Log) (*AdvancedVirtualPowerPlantDAOBalanceWithdrawn, error) {
	event := new(AdvancedVirtualPowerPlantDAOBalanceWithdrawn)
	if err := _AdvancedVirtualPowerPlantDAO.contract.UnpackLog(event, "BalanceWithdrawn", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchBalanceWithdrawn is a free log subscription operation binding the contract event 0xddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1.
//
// Solidity: event BalanceWithdrawn(address indexed participant, uint256 withdrawnAmount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchBalanceWithdrawn(fromBlock *int64, handler func(int, []types.Log), participant common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchBalanceWithdrawn(fromBlock, handler, participant)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchAllBalanceWithdrawn(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchAllBalanceWithdrawn(fromBlock, handler)
}

// ParseBalanceWithdrawn is a log parse operation binding the contract event 0xddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1.
//
// Solidity: event BalanceWithdrawn(address indexed participant, uint256 withdrawnAmount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) ParseBalanceWithdrawn(log types.Log) (*AdvancedVirtualPowerPlantDAOBalanceWithdrawn, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.ParseBalanceWithdrawn(log)
}

// AdvancedVirtualPowerPlantDAOBidSubmitted represents a BidSubmitted event raised by the AdvancedVirtualPowerPlantDAO contract.
type AdvancedVirtualPowerPlantDAOBidSubmitted struct {
	BidId  *big.Int
	Buyer  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// WatchBidSubmitted is a free log subscription operation binding the contract event 0x177554f051f4aa1f0d0310334854b429baeecdb5a96bc329a26fd0cb7c8a7be3.
//
// Solidity: event BidSubmitted(uint256 indexed bidId, address indexed buyer, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchBidSubmitted(fromBlock *int64, handler func(int, []types.Log), bidId *big.Int, buyer common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "BidSubmitted", bidId, buyer)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchAllBidSubmitted(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "BidSubmitted")
}

// ParseBidSubmitted is a log parse operation binding the contract event 0x177554f051f4aa1f0d0310334854b429baeecdb5a96bc329a26fd0cb7c8a7be3.
//
// Solidity: event BidSubmitted(uint256 indexed bidId, address indexed buyer, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) ParseBidSubmitted(log types.Log) (*AdvancedVirtualPowerPlantDAOBidSubmitted, error) {
	event := new(AdvancedVirtualPowerPlantDAOBidSubmitted)
	if err := _AdvancedVirtualPowerPlantDAO.contract.UnpackLog(event, "BidSubmitted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchBidSubmitted is a free log subscription operation binding the contract event 0x177554f051f4aa1f0d0310334854b429baeecdb5a96bc329a26fd0cb7c8a7be3.
//
// Solidity: event BidSubmitted(uint256 indexed bidId, address indexed buyer, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchBidSubmitted(fromBlock *int64, handler func(int, []types.Log), bidId *big.Int, buyer common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchBidSubmitted(fromBlock, handler, bidId, buyer)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchAllBidSubmitted(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchAllBidSubmitted(fromBlock, handler)
}

// ParseBidSubmitted is a log parse operation binding the contract event 0x177554f051f4aa1f0d0310334854b429baeecdb5a96bc329a26fd0cb7c8a7be3.
//
// Solidity: event BidSubmitted(uint256 indexed bidId, address indexed buyer, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) ParseBidSubmitted(log types.Log) (*AdvancedVirtualPowerPlantDAOBidSubmitted, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.ParseBidSubmitted(log)
}

// AdvancedVirtualPowerPlantDAOOfferSubmitted represents a OfferSubmitted event raised by the AdvancedVirtualPowerPlantDAO contract.
type AdvancedVirtualPowerPlantDAOOfferSubmitted struct {
	OfferId *big.Int
	Seller  common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// WatchOfferSubmitted is a free log subscription operation binding the contract event 0x9ce423f721817463c7cc902096f4dc780402a942570ea20e5577fa2db4942d4e.
//
// Solidity: event OfferSubmitted(uint256 indexed offerId, address indexed seller, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchOfferSubmitted(fromBlock *int64, handler func(int, []types.Log), offerId *big.Int, seller common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "OfferSubmitted", offerId, seller)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchAllOfferSubmitted(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "OfferSubmitted")
}

// ParseOfferSubmitted is a log parse operation binding the contract event 0x9ce423f721817463c7cc902096f4dc780402a942570ea20e5577fa2db4942d4e.
//
// Solidity: event OfferSubmitted(uint256 indexed offerId, address indexed seller, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) ParseOfferSubmitted(log types.Log) (*AdvancedVirtualPowerPlantDAOOfferSubmitted, error) {
	event := new(AdvancedVirtualPowerPlantDAOOfferSubmitted)
	if err := _AdvancedVirtualPowerPlantDAO.contract.UnpackLog(event, "OfferSubmitted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchOfferSubmitted is a free log subscription operation binding the contract event 0x9ce423f721817463c7cc902096f4dc780402a942570ea20e5577fa2db4942d4e.
//
// Solidity: event OfferSubmitted(uint256 indexed offerId, address indexed seller, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchOfferSubmitted(fromBlock *int64, handler func(int, []types.Log), offerId *big.Int, seller common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchOfferSubmitted(fromBlock, handler, offerId, seller)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchAllOfferSubmitted(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchAllOfferSubmitted(fromBlock, handler)
}

// ParseOfferSubmitted is a log parse operation binding the contract event 0x9ce423f721817463c7cc902096f4dc780402a942570ea20e5577fa2db4942d4e.
//
// Solidity: event OfferSubmitted(uint256 indexed offerId, address indexed seller, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) ParseOfferSubmitted(log types.Log) (*AdvancedVirtualPowerPlantDAOOfferSubmitted, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.ParseOfferSubmitted(log)
}

// AdvancedVirtualPowerPlantDAOOwnershipTransferred represents a OwnershipTransferred event raised by the AdvancedVirtualPowerPlantDAO contract.
type AdvancedVirtualPowerPlantDAOOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchOwnershipTransferred(fromBlock *int64, handler func(int, []types.Log), previousOwner common.Address, newOwner common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "OwnershipTransferred", previousOwner, newOwner)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchAllOwnershipTransferred(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "OwnershipTransferred")
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) ParseOwnershipTransferred(log types.Log) (*AdvancedVirtualPowerPlantDAOOwnershipTransferred, error) {
	event := new(AdvancedVirtualPowerPlantDAOOwnershipTransferred)
	if err := _AdvancedVirtualPowerPlantDAO.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchOwnershipTransferred(fromBlock *int64, handler func(int, []types.Log), previousOwner common.Address, newOwner common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchOwnershipTransferred(fromBlock, handler, previousOwner, newOwner)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchAllOwnershipTransferred(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchAllOwnershipTransferred(fromBlock, handler)
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) ParseOwnershipTransferred(log types.Log) (*AdvancedVirtualPowerPlantDAOOwnershipTransferred, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.ParseOwnershipTransferred(log)
}

// AdvancedVirtualPowerPlantDAOParticipantRegistered represents a ParticipantRegistered event raised by the AdvancedVirtualPowerPlantDAO contract.
type AdvancedVirtualPowerPlantDAOParticipantRegistered struct {
	Participant common.Address
	Mode        uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// WatchParticipantRegistered is a free log subscription operation binding the contract event 0x806d89d78ee0f826f9fa2e75e6e53e4a91ee0f70688d2152fd4d107423f3da63.
//
// Solidity: event ParticipantRegistered(address indexed participant, uint8 mode)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchParticipantRegistered(fromBlock *int64, handler func(int, []types.Log), participant common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "ParticipantRegistered", participant)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchAllParticipantRegistered(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "ParticipantRegistered")
}

// ParseParticipantRegistered is a log parse operation binding the contract event 0x806d89d78ee0f826f9fa2e75e6e53e4a91ee0f70688d2152fd4d107423f3da63.
//
// Solidity: event ParticipantRegistered(address indexed participant, uint8 mode)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) ParseParticipantRegistered(log types.Log) (*AdvancedVirtualPowerPlantDAOParticipantRegistered, error) {
	event := new(AdvancedVirtualPowerPlantDAOParticipantRegistered)
	if err := _AdvancedVirtualPowerPlantDAO.contract.UnpackLog(event, "ParticipantRegistered", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchParticipantRegistered is a free log subscription operation binding the contract event 0x806d89d78ee0f826f9fa2e75e6e53e4a91ee0f70688d2152fd4d107423f3da63.
//
// Solidity: event ParticipantRegistered(address indexed participant, uint8 mode)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchParticipantRegistered(fromBlock *int64, handler func(int, []types.Log), participant common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchParticipantRegistered(fromBlock, handler, participant)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchAllParticipantRegistered(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchAllParticipantRegistered(fromBlock, handler)
}

// ParseParticipantRegistered is a log parse operation binding the contract event 0x806d89d78ee0f826f9fa2e75e6e53e4a91ee0f70688d2152fd4d107423f3da63.
//
// Solidity: event ParticipantRegistered(address indexed participant, uint8 mode)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) ParseParticipantRegistered(log types.Log) (*AdvancedVirtualPowerPlantDAOParticipantRegistered, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.ParseParticipantRegistered(log)
}

// AdvancedVirtualPowerPlantDAOTradeCanceled represents a TradeCanceled event raised by the AdvancedVirtualPowerPlantDAO contract.
type AdvancedVirtualPowerPlantDAOTradeCanceled struct {
	TradeId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// WatchTradeCanceled is a free log subscription operation binding the contract event 0xad521b51e4183d03fdc603c126ca5614f8730f21a104f15df29625da5d479677.
//
// Solidity: event TradeCanceled(uint256 indexed tradeId)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchTradeCanceled(fromBlock *int64, handler func(int, []types.Log), tradeId *big.Int) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "TradeCanceled", tradeId)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchAllTradeCanceled(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "TradeCanceled")
}

// ParseTradeCanceled is a log parse operation binding the contract event 0xad521b51e4183d03fdc603c126ca5614f8730f21a104f15df29625da5d479677.
//
// Solidity: event TradeCanceled(uint256 indexed tradeId)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) ParseTradeCanceled(log types.Log) (*AdvancedVirtualPowerPlantDAOTradeCanceled, error) {
	event := new(AdvancedVirtualPowerPlantDAOTradeCanceled)
	if err := _AdvancedVirtualPowerPlantDAO.contract.UnpackLog(event, "TradeCanceled", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchTradeCanceled is a free log subscription operation binding the contract event 0xad521b51e4183d03fdc603c126ca5614f8730f21a104f15df29625da5d479677.
//
// Solidity: event TradeCanceled(uint256 indexed tradeId)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchTradeCanceled(fromBlock *int64, handler func(int, []types.Log), tradeId *big.Int) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchTradeCanceled(fromBlock, handler, tradeId)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchAllTradeCanceled(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchAllTradeCanceled(fromBlock, handler)
}

// ParseTradeCanceled is a log parse operation binding the contract event 0xad521b51e4183d03fdc603c126ca5614f8730f21a104f15df29625da5d479677.
//
// Solidity: event TradeCanceled(uint256 indexed tradeId)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) ParseTradeCanceled(log types.Log) (*AdvancedVirtualPowerPlantDAOTradeCanceled, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.ParseTradeCanceled(log)
}

// AdvancedVirtualPowerPlantDAOTradeExecuted represents a TradeExecuted event raised by the AdvancedVirtualPowerPlantDAO contract.
type AdvancedVirtualPowerPlantDAOTradeExecuted struct {
	TradeId *big.Int
	Seller  common.Address
	Buyer   common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// WatchTradeExecuted is a free log subscription operation binding the contract event 0xd78d794f3970a6662278469523ed77ea2ba4e5de1d7e203e1929e92522feef1e.
//
// Solidity: event TradeExecuted(uint256 indexed tradeId, address indexed seller, address indexed buyer, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchTradeExecuted(fromBlock *int64, handler func(int, []types.Log), tradeId *big.Int, seller common.Address, buyer common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "TradeExecuted", tradeId, seller, buyer)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchAllTradeExecuted(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "TradeExecuted")
}

// ParseTradeExecuted is a log parse operation binding the contract event 0xd78d794f3970a6662278469523ed77ea2ba4e5de1d7e203e1929e92522feef1e.
//
// Solidity: event TradeExecuted(uint256 indexed tradeId, address indexed seller, address indexed buyer, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) ParseTradeExecuted(log types.Log) (*AdvancedVirtualPowerPlantDAOTradeExecuted, error) {
	event := new(AdvancedVirtualPowerPlantDAOTradeExecuted)
	if err := _AdvancedVirtualPowerPlantDAO.contract.UnpackLog(event, "TradeExecuted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchTradeExecuted is a free log subscription operation binding the contract event 0xd78d794f3970a6662278469523ed77ea2ba4e5de1d7e203e1929e92522feef1e.
//
// Solidity: event TradeExecuted(uint256 indexed tradeId, address indexed seller, address indexed buyer, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchTradeExecuted(fromBlock *int64, handler func(int, []types.Log), tradeId *big.Int, seller common.Address, buyer common.Address) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchTradeExecuted(fromBlock, handler, tradeId, seller, buyer)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchAllTradeExecuted(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchAllTradeExecuted(fromBlock, handler)
}

// ParseTradeExecuted is a log parse operation binding the contract event 0xd78d794f3970a6662278469523ed77ea2ba4e5de1d7e203e1929e92522feef1e.
//
// Solidity: event TradeExecuted(uint256 indexed tradeId, address indexed seller, address indexed buyer, uint256 amount)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) ParseTradeExecuted(log types.Log) (*AdvancedVirtualPowerPlantDAOTradeExecuted, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.ParseTradeExecuted(log)
}

// AdvancedVirtualPowerPlantDAOTradeSettled represents a TradeSettled event raised by the AdvancedVirtualPowerPlantDAO contract.
type AdvancedVirtualPowerPlantDAOTradeSettled struct {
	TradeId *big.Int
	Mode    uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// WatchTradeSettled is a free log subscription operation binding the contract event 0xe5a2ae93d0e1ff40575daedb891e24b51ec149595c1a8c9287458fb7954b8a4e.
//
// Solidity: event TradeSettled(uint256 indexed tradeId, uint8 mode)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchTradeSettled(fromBlock *int64, handler func(int, []types.Log), tradeId *big.Int) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "TradeSettled", tradeId)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) WatchAllTradeSettled(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.contract.WatchLogs(fromBlock, handler, "TradeSettled")
}

// ParseTradeSettled is a log parse operation binding the contract event 0xe5a2ae93d0e1ff40575daedb891e24b51ec149595c1a8c9287458fb7954b8a4e.
//
// Solidity: event TradeSettled(uint256 indexed tradeId, uint8 mode)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOFilterer) ParseTradeSettled(log types.Log) (*AdvancedVirtualPowerPlantDAOTradeSettled, error) {
	event := new(AdvancedVirtualPowerPlantDAOTradeSettled)
	if err := _AdvancedVirtualPowerPlantDAO.contract.UnpackLog(event, "TradeSettled", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WatchTradeSettled is a free log subscription operation binding the contract event 0xe5a2ae93d0e1ff40575daedb891e24b51ec149595c1a8c9287458fb7954b8a4e.
//
// Solidity: event TradeSettled(uint256 indexed tradeId, uint8 mode)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchTradeSettled(fromBlock *int64, handler func(int, []types.Log), tradeId *big.Int) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchTradeSettled(fromBlock, handler, tradeId)
}

func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) WatchAllTradeSettled(fromBlock *int64, handler func(int, []types.Log)) (string, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.WatchAllTradeSettled(fromBlock, handler)
}

// ParseTradeSettled is a log parse operation binding the contract event 0xe5a2ae93d0e1ff40575daedb891e24b51ec149595c1a8c9287458fb7954b8a4e.
//
// Solidity: event TradeSettled(uint256 indexed tradeId, uint8 mode)
func (_AdvancedVirtualPowerPlantDAO *AdvancedVirtualPowerPlantDAOSession) ParseTradeSettled(log types.Log) (*AdvancedVirtualPowerPlantDAOTradeSettled, error) {
	return _AdvancedVirtualPowerPlantDAO.Contract.ParseTradeSettled(log)
}
